#ifndef lexer_h
#define lexer_h
#include <stdio.h>

typedef enum {
  TOKEN_END,

  TOKEN_BOOL,
  TOKEN_INT,
  TOKEN_CHAR,
  TOKEN_VOID,

  TOKEN_VOLATILE,
  TOKEN_UNSIGNED,
  TOKEN_CONST,
  TOKEN_REGISTER,

  TOKEN_TRUE,
  TOKEN_FALSE,
  TOKEN_NULL,

  TOKEN_SIZEOF,
  TOKEN_TYPEOF,

  TOKEN_STRUCT,
  TOKEN_ENUM,
  TOKEN_UNION,

  TOKEN_DO,
  TOKEN_WHILE,
  TOKEN_FOR,
  TOKEN_BREAK,
  TOKEN_CONTINUE,

  TOKEN_IF,
  TOKEN_ELSE,
  TOKEN_SWITCH,
  TOKEN_CASE,
  TOKEN_DEFAULT,

  TOKEN_INLINE,


  TOKEN_NUMBER,
  TOKEN_STRING,
  TOKEN_TYPE,
  TOKEN_NAME, // Function name, variable name

  TOKEN_EQUALS,
  TOKEN_EQUALS_EQUALS,
  TOKEN_NOT,
  TOKEN_NOT_EQUALS,

  TOKEN_LESS_THAN,
  TOKEN_LESS_THAN_EQUALS,
  TOKEN_GREATER_THAN,
  TOKEN_GREATER_THAN_EQUALS,


  TOKEN_AMPERSAND,
  TOKEN_AND,
  TOKEN_PIPE,
  TOKEN_OR,
  TOKEN_CARET, // XOR

  TOKEN_PLUS,
  TOKEN_PLUS_PLUS,
  TOKEN_MINUS,
  TOKEN_MINUS_MINUS,
  TOKEN_STAR,
  TOKEN_SLASH,
  TOKEN_PERCENT,
  
  TOKEN_DOT,
  TOKEN_COMMA,
  TOKEN_SEMI_COLON,
  TOKEN_COLON,
  TOKEN_LEFT_PARENTHESES,
  TOKEN_RIGHT_PARENTHESES,
  TOKEN_LEFT_BRACKET,
  TOKEN_RIGHT_BRACKET,

} token_type;

typedef struct {
  token_type type;
  char *value; // Always a vector!
} token;

token *lexer(FILE *file);

#endif 
